// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tests

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ChannelChannelState is an auto generated low-level Go binding around an user-defined struct.
type ChannelChannelState struct {
	A           common.Address
	B           common.Address
	ValueA      *big.Int
	ValueB      *big.Int
	Progression uint8
	Round       *big.Int
}

// ChannelMetaData contains all meta data concerning the Channel contract.
var ChannelMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ID\",\"type\":\"bytes32\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ID\",\"type\":\"bytes32\"}],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"round\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"Closing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ID\",\"type\":\"bytes32\"}],\"name\":\"Open\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueB\",\"type\":\"uint256\"},{\"internalType\":\"enumChannel.Progression\",\"name\":\"progression\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"round\",\"type\":\"uint128\"}],\"internalType\":\"structChannel.ChannelState\",\"name\":\"oldState\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueB\",\"type\":\"uint256\"},{\"internalType\":\"enumChannel.Progression\",\"name\":\"progression\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"round\",\"type\":\"uint128\"}],\"internalType\":\"structChannel.ChannelState\",\"name\":\"newState\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"CooperativeClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueB\",\"type\":\"uint256\"},{\"internalType\":\"enumChannel.Progression\",\"name\":\"progression\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"round\",\"type\":\"uint128\"}],\"internalType\":\"structChannel.ChannelState\",\"name\":\"oldState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ForceClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueB\",\"type\":\"uint256\"},{\"internalType\":\"enumChannel.Progression\",\"name\":\"progression\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"round\",\"type\":\"uint128\"}],\"internalType\":\"structChannel.ChannelState\",\"name\":\"oldState\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueB\",\"type\":\"uint256\"},{\"internalType\":\"enumChannel.Progression\",\"name\":\"progression\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"round\",\"type\":\"uint128\"}],\"internalType\":\"structChannel.ChannelState\",\"name\":\"newState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"accept\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueB\",\"type\":\"uint256\"},{\"internalType\":\"enumChannel.Progression\",\"name\":\"progression\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"round\",\"type\":\"uint128\"}],\"internalType\":\"structChannel.ChannelState\",\"name\":\"oldState\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueB\",\"type\":\"uint256\"},{\"internalType\":\"enumChannel.Progression\",\"name\":\"progression\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"round\",\"type\":\"uint128\"}],\"internalType\":\"structChannel.ChannelState\",\"name\":\"newState\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueB\",\"type\":\"uint256\"},{\"internalType\":\"enumChannel.Progression\",\"name\":\"progression\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"round\",\"type\":\"uint128\"}],\"internalType\":\"structChannel.ChannelState\",\"name\":\"oldState\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueB\",\"type\":\"uint256\"},{\"internalType\":\"enumChannel.Progression\",\"name\":\"progression\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"round\",\"type\":\"uint128\"}],\"internalType\":\"structChannel.ChannelState\",\"name\":\"newState\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"disputeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"closer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueB\",\"type\":\"uint256\"},{\"internalType\":\"enumChannel.Progression\",\"name\":\"progression\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"round\",\"type\":\"uint128\"}],\"internalType\":\"structChannel.ChannelState\",\"name\":\"state\",\"type\":\"tuple\"}],\"name\":\"hashState\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueB\",\"type\":\"uint256\"},{\"internalType\":\"enumChannel.Progression\",\"name\":\"progression\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"round\",\"type\":\"uint128\"}],\"internalType\":\"structChannel.ChannelState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x6080604052620151806000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555034801561003b57600080fd5b50612b348061004b6000396000f3fe6080604052600436106100865760003560e01c8063a48ed78f11610059578063a48ed78f14610158578063b03a28a814610181578063b562b709146101aa578063e16ac9f8146101e7578063f513def11461020357610086565b806311be19971461008b5780637614c599146100c95780637a7ebd7b146100f25780638e11a5791461012f575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611baa565b61021f565b6040516100c092919061242a565b60405180910390f35b3480156100d557600080fd5b506100f060048036038101906100eb9190611d5f565b610277565b005b3480156100fe57600080fd5b5061011960048036038101906101149190611baa565b610694565b6040516101269190612161565b60405180910390f35b34801561013b57600080fd5b5061015660048036038101906101519190611bd7565b6106ac565b005b34801561016457600080fd5b5061017f600480360381019061017a9190611c17565b6108f0565b005b34801561018d57600080fd5b506101a860048036038101906101a39190611c17565b610c8f565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190611c9d565b6110f1565b6040516101de9190612161565b60405180910390f35b61020160048036038101906101fc9190611d0a565b611148565b005b61021d60048036038101906102189190611cca565b61158e565b005b60026020528060005260406000206000915090508060000160009054906101000a900467ffffffffffffffff16908060000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b83600180600281111561028d5761028c612677565b5b826080015160028111156102a4576102a3612677565b5b146102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db906122a1565b60405180910390fd5b8585806000015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161461035c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035390612221565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff16146103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990612221565b60405180910390fd5b806040015181606001516103e691906124ba565b826060015183604001516103fa91906124ba565b1461043a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043190612221565b60405180910390fd5b610443886110f1565b600160008781526020019081526020016000205414610497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048e906121e1565b60405180910390fd5b60006104a389336117b9565b905060006104b0896110f1565b90508173ffffffffffffffffffffffffffffffffffffffff166104d3828a61188b565b73ffffffffffffffffffffffffffffffffffffffff1614610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052090612201565b60405180910390fd5b60006002600089815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16146105a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610597906122e1565b60405180910390fd5b806001600089815260200190815260200160002081905550426002600089815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550336002600089815260200190815260200160002060000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550867f6e129f552c838f9ab74444d21bd821c7694edfcbbd3c2294dbc7bc48290401808a60a0015142604051610680929190612401565b60405180910390a250505050505050505050565b60016020528060005260406000206000915090505481565b818036038101906106bd9190611c9d565b60018060028111156106d2576106d1612677565b5b826080015160028111156106e9576106e8612677565b5b14610729576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610720906122a1565b60405180910390fd5b6107428480360381019061073d9190611c9d565b6110f1565b600160008581526020019081526020016000205414610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078d906121e1565b60405180910390fd5b60006002600085815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16141561080e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610805906122c1565b60405180910390fd5b4260008054906101000a900467ffffffffffffffff166002600086815260200190815260200160002060000160009054906101000a900467ffffffffffffffff166108599190612510565b67ffffffffffffffff16106108a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089a906123c1565b60405180910390fd5b6108bd848036038101906108b79190611c9d565b84611977565b827f7b6ac8bce3193cb9464e9070476bf8926e449f5f743f8c7578eea15265467d7960405160405180910390a250505050565b838036038101906109019190611c9d565b600180600281111561091657610915612677565b5b8260800151600281111561092d5761092c612677565b5b1461096d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610964906122a1565b60405180910390fd5b8580360381019061097e9190611c9d565b85806000015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff16146109f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ec90612221565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff1614610a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6290612221565b60405180910390fd5b80604001518160600151610a7f91906124ba565b82606001518360400151610a9391906124ba565b14610ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aca90612221565b60405180910390fd5b610aec88803603810190610ae79190611c9d565b6110f1565b600160008781526020019081526020016000205414610b40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b37906121e1565b60405180910390fd5b600280811115610b5357610b52612677565b5b87608001516002811115610b6a57610b69612677565b5b14610baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba190612261565b60405180910390fd5b6000610bc689803603810190610bc09190611c9d565b336117b9565b90506000610bd3896110f1565b90508173ffffffffffffffffffffffffffffffffffffffff16610bf6828a61188b565b73ffffffffffffffffffffffffffffffffffffffff1614610c4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4390612201565b60405180910390fd5b610c568988611977565b867f7b6ac8bce3193cb9464e9070476bf8926e449f5f743f8c7578eea15265467d7960405160405180910390a250505050505050505050565b83803603810190610ca09190611c9d565b6001806002811115610cb557610cb4612677565b5b82608001516002811115610ccc57610ccb612677565b5b14610d0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d03906122a1565b60405180910390fd5b85803603810190610d1d9190611c9d565b85806000015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1614610d94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8b90612221565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff1614610e0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0190612221565b60405180910390fd5b80604001518160600151610e1e91906124ba565b82606001518360400151610e3291906124ba565b14610e72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6990612221565b60405180910390fd5b610e8b88803603810190610e869190611c9d565b6110f1565b600160008781526020019081526020016000205414610edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed6906121e1565b60405180910390fd5b6000610efb89803603810190610ef59190611c9d565b336117b9565b90506000610f08896110f1565b90508173ffffffffffffffffffffffffffffffffffffffff16610f2b828a61188b565b73ffffffffffffffffffffffffffffffffffffffff1614610f81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7890612201565b60405180910390fd5b8860a001516fffffffffffffffffffffffffffffffff168a60a0016020810190610fab9190611de5565b6fffffffffffffffffffffffffffffffff1610610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff490612341565b60405180910390fd5b806001600089815260200190815260200160002081905550426002600089815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550336002600089815260200190815260200160002060000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550867f6e129f552c838f9ab74444d21bd821c7694edfcbbd3c2294dbc7bc48290401808a60a00151426040516110dd929190612401565b60405180910390a250505050505050505050565b600080826000015183602001518460400151856060015186608001518760a0015160405160200161112796959493929190612100565b60405160208183030381529060405290508080519060200120915050919050565b82600080600281111561115e5761115d612677565b5b8260800151600281111561117557611174612677565b5b146111b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ac906122a1565b60405180910390fd5b8360018060028111156111cb576111ca612677565b5b826080015160028111156111e2576111e1612677565b5b14611222576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611219906122a1565b60405180910390fd5b8686806000015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161461129a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129190612221565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff1614611310576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130790612221565b60405180910390fd5b8060400151816060015161132491906124ba565b8260600151836040015161133891906124ba565b14611378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136f90612221565b60405180910390fd5b611381896110f1565b6001600089815260200190815260200160002054146113d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cc906121e1565b60405180910390fd5b876040015189604001511461141f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141690612361565b60405180910390fd5b886020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611491576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148890612301565b60405180910390fd5b886060015134146114d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ce906121c1565b60405180910390fd5b60008860a001516fffffffffffffffffffffffffffffffff1614611530576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152790612241565b60405180910390fd5b600061153b896110f1565b905080600160008a815260200190815260200160002081905550877f1f3c0697c3ada95f9e84a917995664b76cd8b4ae5de25e77ee111122ae3a00d060405160405180910390a250505050505050505050565b816000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f7906123a1565b60405180910390fd5b81604001513414611646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163d906121c1565b60405180910390fd5b6000801b60016000838152602001908152602001600020541461169e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169590612381565b60405180910390fd5b60008260a001516fffffffffffffffffffffffffffffffff16146116f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ee90612281565b60405180910390fd5b6000600281111561170b5761170a612677565b5b8260800151600281111561172257611721612677565b5b14611762576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611759906123e1565b60405180910390fd5b600061176d836110f1565b9050806001600084815260200190815260200160002081905550817fddffb592d6434d02d388cf2eb4fbfa796fbfcd09e278d3466e7194dfd3c23a0460405160405180910390a2505050565b6000826000015173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117ff5782602001519050611885565b826020015173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118435782600001519050611885565b6000611884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187b90612321565b60405180910390fd5b5b92915050565b6000604182511461189f5760009050611971565b60008060006020850151925060408501519150606085015160001a90507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c11156118f35760009350505050611971565b601b8160ff161415801561190b5750601c8160ff1614155b1561191c5760009350505050611971565b6001868285856040516000815260200160405260405161193f949392919061217c565b6020604051602081039080840390855afa158015611961573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b6000801b6001600083815260200190815260200160002081905550816000015173ffffffffffffffffffffffffffffffffffffffff166108fc83604001519081150290604051600060405180830381858888f1935050505050816020015173ffffffffffffffffffffffffffffffffffffffff166108fc83606001519081150290604051600060405180830381858888f19350505050505050565b6000611a25611a2084612478565b612453565b905082815260208101848484011115611a4157611a406126e4565b5b611a4c848285612608565b509392505050565b600081359050611a6381612a92565b92915050565b600081359050611a7881612aa9565b92915050565b600082601f830112611a9357611a926126d5565b5b8135611aa3848260208601611a12565b91505092915050565b600081359050611abb81612ac0565b92915050565b600060c08284031215611ad757611ad66126da565b5b81905092915050565b600060c08284031215611af657611af56126df565b5b611b0060c0612453565b90506000611b1084828501611a54565b6000830152506020611b2484828501611a54565b6020830152506040611b3884828501611b95565b6040830152506060611b4c84828501611b95565b6060830152506080611b6084828501611aac565b60808301525060a0611b7484828501611b80565b60a08301525092915050565b600081359050611b8f81612ad0565b92915050565b600081359050611ba481612ae7565b92915050565b600060208284031215611bc057611bbf6126ee565b5b6000611bce84828501611a69565b91505092915050565b60008060e08385031215611bee57611bed6126ee565b5b6000611bfc85828601611ac1565b92505060c0611c0d85828601611a69565b9150509250929050565b6000806000806101c08587031215611c3257611c316126ee565b5b6000611c4087828801611ac1565b94505060c0611c5187828801611ae0565b93505061018085013567ffffffffffffffff811115611c7357611c726126e9565b5b611c7f87828801611a7e565b9250506101a0611c9187828801611a69565b91505092959194509250565b600060c08284031215611cb357611cb26126ee565b5b6000611cc184828501611ae0565b91505092915050565b60008060e08385031215611ce157611ce06126ee565b5b6000611cef85828601611ae0565b92505060c0611d0085828601611a69565b9150509250929050565b60008060006101a08486031215611d2457611d236126ee565b5b6000611d3286828701611ae0565b93505060c0611d4386828701611ae0565b925050610180611d5586828701611a69565b9150509250925092565b6000806000806101c08587031215611d7a57611d796126ee565b5b6000611d8887828801611ae0565b94505060c0611d9987828801611ae0565b93505061018085013567ffffffffffffffff811115611dbb57611dba6126e9565b5b611dc787828801611a7e565b9250506101a0611dd987828801611a69565b91505092959194509250565b600060208284031215611dfb57611dfa6126ee565b5b6000611e0984828501611b80565b91505092915050565b611e1b81612560565b82525050565b611e2a8161254e565b82525050565b611e3981612572565b82525050565b611e48816125f6565b82525050565b6000611e5b601e836124a9565b9150611e6682612704565b602082019050919050565b6000611e7e6011836124a9565b9150611e898261272d565b602082019050919050565b6000611ea16011836124a9565b9150611eac82612756565b602082019050919050565b6000611ec46016836124a9565b9150611ecf8261277f565b602082019050919050565b6000611ee7601e836124a9565b9150611ef2826127a8565b602082019050919050565b6000611f0a6014836124a9565b9150611f15826127d1565b602082019050919050565b6000611f2d601c836124a9565b9150611f38826127fa565b602082019050919050565b6000611f50601b836124a9565b9150611f5b82612823565b602082019050919050565b6000611f736014836124a9565b9150611f7e8261284c565b602082019050919050565b6000611f96601b836124a9565b9150611fa182612875565b602082019050919050565b6000611fb96017836124a9565b9150611fc48261289e565b602082019050919050565b6000611fdc600d836124a9565b9150611fe7826128c7565b602082019050919050565b6000611fff6021836124a9565b915061200a826128f0565b604082019050919050565b60006120226021836124a9565b915061202d8261293f565b604082019050919050565b60006120456016836124a9565b91506120508261298e565b602082019050919050565b60006120686017836124a9565b9150612073826129b7565b602082019050919050565b600061208b6021836124a9565b9150612096826129e0565b604082019050919050565b60006120ae6027836124a9565b91506120b982612a2f565b604082019050919050565b6120cd8161258f565b82525050565b6120dc816125cb565b82525050565b6120eb816125d5565b82525050565b6120fa816125e9565b82525050565b600060c0820190506121156000830189611e12565b6121226020830188611e12565b61212f60408301876120d3565b61213c60608301866120d3565b6121496080830185611e3f565b61215660a08301846120c4565b979650505050505050565b60006020820190506121766000830184611e30565b92915050565b60006080820190506121916000830187611e30565b61219e60208301866120f1565b6121ab6040830185611e30565b6121b86060830184611e30565b95945050505050565b600060208201905081810360008301526121da81611e4e565b9050919050565b600060208201905081810360008301526121fa81611e71565b9050919050565b6000602082019050818103600083015261221a81611e94565b9050919050565b6000602082019050818103600083015261223a81611eb7565b9050919050565b6000602082019050818103600083015261225a81611eda565b9050919050565b6000602082019050818103600083015261227a81611efd565b9050919050565b6000602082019050818103600083015261229a81611f20565b9050919050565b600060208201905081810360008301526122ba81611f43565b9050919050565b600060208201905081810360008301526122da81611f66565b9050919050565b600060208201905081810360008301526122fa81611f89565b9050919050565b6000602082019050818103600083015261231a81611fac565b9050919050565b6000602082019050818103600083015261233a81611fcf565b9050919050565b6000602082019050818103600083015261235a81611ff2565b9050919050565b6000602082019050818103600083015261237a81612015565b9050919050565b6000602082019050818103600083015261239a81612038565b9050919050565b600060208201905081810360008301526123ba8161205b565b9050919050565b600060208201905081810360008301526123da8161207e565b9050919050565b600060208201905081810360008301526123fa816120a1565b9050919050565b600060408201905061241660008301856120c4565b61242360208301846120e2565b9392505050565b600060408201905061243f60008301856120e2565b61244c6020830184611e21565b9392505050565b600061245d61246e565b90506124698282612617565b919050565b6000604051905090565b600067ffffffffffffffff821115612493576124926126a6565b5b61249c826126f3565b9050602081019050919050565b600082825260208201905092915050565b60006124c5826125cb565b91506124d0836125cb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561250557612504612648565b5b828201905092915050565b600061251b826125d5565b9150612526836125d5565b92508267ffffffffffffffff0382111561254357612542612648565b5b828201905092915050565b6000612559826125ab565b9050919050565b600061256b826125ab565b9050919050565b6000819050919050565b600081905061258a82612a7e565b919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b60006126018261257c565b9050919050565b82818337600083830152505050565b612620826126f3565b810181811067ffffffffffffffff8211171561263f5761263e6126a6565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f70726f706f736572206d7573742061646420656e6f7567682076616c75650000600082015250565b7f696e76616c6964206f6c64207374617465000000000000000000000000000000600082015250565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f696e76616c69642073746174652070726f766964656400000000000000000000600082015250565b7f726f756e642073657420696e206368616e6e656c20616363657074696e670000600082015250565b7f6e6577207374617465206e6f7420636c6f736564000000000000000000000000600082015250565b7f726f756e642073657420696e206368616e6e656c206f70656e696e6700000000600082015250565b7f4368616e6e656c20697320696e20696e76616c69642073746174650000000000600082015250565b7f6e6f206469737075746520617661696c61626c65000000000000000000000000600082015250565b7f6469737075746520616c726561647920696e2070726f67726573730000000000600082015250565b7f6163636570746f72206d7573742062652073656e646572000000000000000000600082015250565b7f696e76616c6964206f7468657200000000000000000000000000000000000000600082015250565b7f6469737075746564206368616c6c656e67652077697468206f6c64207374617460008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b7f63616e206e6f7420737465616c206d6f6e65792066726f6d2070726f706f736560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f6368616e6e656c20616c726561647920696e2075736500000000000000000000600082015250565b7f70726f706f736572206d7573742062652073656e646572000000000000000000600082015250565b7f666f72636520636c6f7365206265666f7265206469737075746520706572696f60008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f63616e206f6e6c79206f70656e206368616e6e656c20696e207374617465207060008201527f726f706f73656400000000000000000000000000000000000000000000000000602082015250565b60038110612a8f57612a8e612677565b5b50565b612a9b81612560565b8114612aa657600080fd5b50565b612ab281612572565b8114612abd57600080fd5b50565b60038110612acd57600080fd5b50565b612ad98161258f565b8114612ae457600080fd5b50565b612af0816125cb565b8114612afb57600080fd5b5056fea26469706673582212201e7119d3ed5cc74ee3298579fd405fbf476ee21e39372aaa0f9f76cc262f0a1b64736f6c63430008070033",
}

// ChannelABI is the input ABI used to generate the binding from.
// Deprecated: Use ChannelMetaData.ABI instead.
var ChannelABI = ChannelMetaData.ABI

// ChannelBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ChannelMetaData.Bin instead.
var ChannelBin = ChannelMetaData.Bin

// DeployChannel deploys a new Ethereum contract, binding an instance of Channel to it.
func DeployChannel(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Channel, error) {
	parsed, err := ChannelMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ChannelBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Channel{ChannelCaller: ChannelCaller{contract: contract}, ChannelTransactor: ChannelTransactor{contract: contract}, ChannelFilterer: ChannelFilterer{contract: contract}}, nil
}

// Channel is an auto generated Go binding around an Ethereum contract.
type Channel struct {
	ChannelCaller     // Read-only binding to the contract
	ChannelTransactor // Write-only binding to the contract
	ChannelFilterer   // Log filterer for contract events
}

// ChannelCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChannelCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChannelTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChannelTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChannelFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChannelFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChannelSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChannelSession struct {
	Contract     *Channel          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ChannelCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChannelCallerSession struct {
	Contract *ChannelCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ChannelTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChannelTransactorSession struct {
	Contract     *ChannelTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ChannelRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChannelRaw struct {
	Contract *Channel // Generic contract binding to access the raw methods on
}

// ChannelCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChannelCallerRaw struct {
	Contract *ChannelCaller // Generic read-only contract binding to access the raw methods on
}

// ChannelTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChannelTransactorRaw struct {
	Contract *ChannelTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChannel creates a new instance of Channel, bound to a specific deployed contract.
func NewChannel(address common.Address, backend bind.ContractBackend) (*Channel, error) {
	contract, err := bindChannel(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Channel{ChannelCaller: ChannelCaller{contract: contract}, ChannelTransactor: ChannelTransactor{contract: contract}, ChannelFilterer: ChannelFilterer{contract: contract}}, nil
}

// NewChannelCaller creates a new read-only instance of Channel, bound to a specific deployed contract.
func NewChannelCaller(address common.Address, caller bind.ContractCaller) (*ChannelCaller, error) {
	contract, err := bindChannel(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChannelCaller{contract: contract}, nil
}

// NewChannelTransactor creates a new write-only instance of Channel, bound to a specific deployed contract.
func NewChannelTransactor(address common.Address, transactor bind.ContractTransactor) (*ChannelTransactor, error) {
	contract, err := bindChannel(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChannelTransactor{contract: contract}, nil
}

// NewChannelFilterer creates a new log filterer instance of Channel, bound to a specific deployed contract.
func NewChannelFilterer(address common.Address, filterer bind.ContractFilterer) (*ChannelFilterer, error) {
	contract, err := bindChannel(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChannelFilterer{contract: contract}, nil
}

// bindChannel binds a generic wrapper to an already deployed contract.
func bindChannel(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChannelABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Channel *ChannelRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Channel.Contract.ChannelCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Channel *ChannelRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Channel.Contract.ChannelTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Channel *ChannelRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Channel.Contract.ChannelTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Channel *ChannelCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Channel.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Channel *ChannelTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Channel.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Channel *ChannelTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Channel.Contract.contract.Transact(opts, method, params...)
}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) view returns(bytes32)
func (_Channel *ChannelCaller) Channels(opts *bind.CallOpts, arg0 [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Channel.contract.Call(opts, &out, "channels", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) view returns(bytes32)
func (_Channel *ChannelSession) Channels(arg0 [32]byte) ([32]byte, error) {
	return _Channel.Contract.Channels(&_Channel.CallOpts, arg0)
}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) view returns(bytes32)
func (_Channel *ChannelCallerSession) Channels(arg0 [32]byte) ([32]byte, error) {
	return _Channel.Contract.Channels(&_Channel.CallOpts, arg0)
}

// Disputes is a free data retrieval call binding the contract method 0x11be1997.
//
// Solidity: function disputes(bytes32 ) view returns(uint64 time, address closer)
func (_Channel *ChannelCaller) Disputes(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Time   uint64
	Closer common.Address
}, error) {
	var out []interface{}
	err := _Channel.contract.Call(opts, &out, "disputes", arg0)

	outstruct := new(struct {
		Time   uint64
		Closer common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Time = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.Closer = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Disputes is a free data retrieval call binding the contract method 0x11be1997.
//
// Solidity: function disputes(bytes32 ) view returns(uint64 time, address closer)
func (_Channel *ChannelSession) Disputes(arg0 [32]byte) (struct {
	Time   uint64
	Closer common.Address
}, error) {
	return _Channel.Contract.Disputes(&_Channel.CallOpts, arg0)
}

// Disputes is a free data retrieval call binding the contract method 0x11be1997.
//
// Solidity: function disputes(bytes32 ) view returns(uint64 time, address closer)
func (_Channel *ChannelCallerSession) Disputes(arg0 [32]byte) (struct {
	Time   uint64
	Closer common.Address
}, error) {
	return _Channel.Contract.Disputes(&_Channel.CallOpts, arg0)
}

// HashState is a free data retrieval call binding the contract method 0xb562b709.
//
// Solidity: function hashState((address,address,uint256,uint256,uint8,uint128) state) pure returns(bytes32)
func (_Channel *ChannelCaller) HashState(opts *bind.CallOpts, state ChannelChannelState) ([32]byte, error) {
	var out []interface{}
	err := _Channel.contract.Call(opts, &out, "hashState", state)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// HashState is a free data retrieval call binding the contract method 0xb562b709.
//
// Solidity: function hashState((address,address,uint256,uint256,uint8,uint128) state) pure returns(bytes32)
func (_Channel *ChannelSession) HashState(state ChannelChannelState) ([32]byte, error) {
	return _Channel.Contract.HashState(&_Channel.CallOpts, state)
}

// HashState is a free data retrieval call binding the contract method 0xb562b709.
//
// Solidity: function hashState((address,address,uint256,uint256,uint8,uint128) state) pure returns(bytes32)
func (_Channel *ChannelCallerSession) HashState(state ChannelChannelState) ([32]byte, error) {
	return _Channel.Contract.HashState(&_Channel.CallOpts, state)
}

// CooperativeClose is a paid mutator transaction binding the contract method 0xa48ed78f.
//
// Solidity: function CooperativeClose((address,address,uint256,uint256,uint8,uint128) oldState, (address,address,uint256,uint256,uint8,uint128) newState, bytes sig, bytes32 id) returns()
func (_Channel *ChannelTransactor) CooperativeClose(opts *bind.TransactOpts, oldState ChannelChannelState, newState ChannelChannelState, sig []byte, id [32]byte) (*types.Transaction, error) {
	return _Channel.contract.Transact(opts, "CooperativeClose", oldState, newState, sig, id)
}

// CooperativeClose is a paid mutator transaction binding the contract method 0xa48ed78f.
//
// Solidity: function CooperativeClose((address,address,uint256,uint256,uint8,uint128) oldState, (address,address,uint256,uint256,uint8,uint128) newState, bytes sig, bytes32 id) returns()
func (_Channel *ChannelSession) CooperativeClose(oldState ChannelChannelState, newState ChannelChannelState, sig []byte, id [32]byte) (*types.Transaction, error) {
	return _Channel.Contract.CooperativeClose(&_Channel.TransactOpts, oldState, newState, sig, id)
}

// CooperativeClose is a paid mutator transaction binding the contract method 0xa48ed78f.
//
// Solidity: function CooperativeClose((address,address,uint256,uint256,uint8,uint128) oldState, (address,address,uint256,uint256,uint8,uint128) newState, bytes sig, bytes32 id) returns()
func (_Channel *ChannelTransactorSession) CooperativeClose(oldState ChannelChannelState, newState ChannelChannelState, sig []byte, id [32]byte) (*types.Transaction, error) {
	return _Channel.Contract.CooperativeClose(&_Channel.TransactOpts, oldState, newState, sig, id)
}

// ForceClose is a paid mutator transaction binding the contract method 0x8e11a579.
//
// Solidity: function ForceClose((address,address,uint256,uint256,uint8,uint128) oldState, bytes32 id) returns()
func (_Channel *ChannelTransactor) ForceClose(opts *bind.TransactOpts, oldState ChannelChannelState, id [32]byte) (*types.Transaction, error) {
	return _Channel.contract.Transact(opts, "ForceClose", oldState, id)
}

// ForceClose is a paid mutator transaction binding the contract method 0x8e11a579.
//
// Solidity: function ForceClose((address,address,uint256,uint256,uint8,uint128) oldState, bytes32 id) returns()
func (_Channel *ChannelSession) ForceClose(oldState ChannelChannelState, id [32]byte) (*types.Transaction, error) {
	return _Channel.Contract.ForceClose(&_Channel.TransactOpts, oldState, id)
}

// ForceClose is a paid mutator transaction binding the contract method 0x8e11a579.
//
// Solidity: function ForceClose((address,address,uint256,uint256,uint8,uint128) oldState, bytes32 id) returns()
func (_Channel *ChannelTransactorSession) ForceClose(oldState ChannelChannelState, id [32]byte) (*types.Transaction, error) {
	return _Channel.Contract.ForceClose(&_Channel.TransactOpts, oldState, id)
}

// Accept is a paid mutator transaction binding the contract method 0xe16ac9f8.
//
// Solidity: function accept((address,address,uint256,uint256,uint8,uint128) oldState, (address,address,uint256,uint256,uint8,uint128) newState, bytes32 id) payable returns()
func (_Channel *ChannelTransactor) Accept(opts *bind.TransactOpts, oldState ChannelChannelState, newState ChannelChannelState, id [32]byte) (*types.Transaction, error) {
	return _Channel.contract.Transact(opts, "accept", oldState, newState, id)
}

// Accept is a paid mutator transaction binding the contract method 0xe16ac9f8.
//
// Solidity: function accept((address,address,uint256,uint256,uint8,uint128) oldState, (address,address,uint256,uint256,uint8,uint128) newState, bytes32 id) payable returns()
func (_Channel *ChannelSession) Accept(oldState ChannelChannelState, newState ChannelChannelState, id [32]byte) (*types.Transaction, error) {
	return _Channel.Contract.Accept(&_Channel.TransactOpts, oldState, newState, id)
}

// Accept is a paid mutator transaction binding the contract method 0xe16ac9f8.
//
// Solidity: function accept((address,address,uint256,uint256,uint8,uint128) oldState, (address,address,uint256,uint256,uint8,uint128) newState, bytes32 id) payable returns()
func (_Channel *ChannelTransactorSession) Accept(oldState ChannelChannelState, newState ChannelChannelState, id [32]byte) (*types.Transaction, error) {
	return _Channel.Contract.Accept(&_Channel.TransactOpts, oldState, newState, id)
}

// Challenge is a paid mutator transaction binding the contract method 0x7614c599.
//
// Solidity: function challenge((address,address,uint256,uint256,uint8,uint128) oldState, (address,address,uint256,uint256,uint8,uint128) newState, bytes sig, bytes32 id) returns()
func (_Channel *ChannelTransactor) Challenge(opts *bind.TransactOpts, oldState ChannelChannelState, newState ChannelChannelState, sig []byte, id [32]byte) (*types.Transaction, error) {
	return _Channel.contract.Transact(opts, "challenge", oldState, newState, sig, id)
}

// Challenge is a paid mutator transaction binding the contract method 0x7614c599.
//
// Solidity: function challenge((address,address,uint256,uint256,uint8,uint128) oldState, (address,address,uint256,uint256,uint8,uint128) newState, bytes sig, bytes32 id) returns()
func (_Channel *ChannelSession) Challenge(oldState ChannelChannelState, newState ChannelChannelState, sig []byte, id [32]byte) (*types.Transaction, error) {
	return _Channel.Contract.Challenge(&_Channel.TransactOpts, oldState, newState, sig, id)
}

// Challenge is a paid mutator transaction binding the contract method 0x7614c599.
//
// Solidity: function challenge((address,address,uint256,uint256,uint8,uint128) oldState, (address,address,uint256,uint256,uint8,uint128) newState, bytes sig, bytes32 id) returns()
func (_Channel *ChannelTransactorSession) Challenge(oldState ChannelChannelState, newState ChannelChannelState, sig []byte, id [32]byte) (*types.Transaction, error) {
	return _Channel.Contract.Challenge(&_Channel.TransactOpts, oldState, newState, sig, id)
}

// DisputeChallenge is a paid mutator transaction binding the contract method 0xb03a28a8.
//
// Solidity: function disputeChallenge((address,address,uint256,uint256,uint8,uint128) oldState, (address,address,uint256,uint256,uint8,uint128) newState, bytes sig, bytes32 id) returns()
func (_Channel *ChannelTransactor) DisputeChallenge(opts *bind.TransactOpts, oldState ChannelChannelState, newState ChannelChannelState, sig []byte, id [32]byte) (*types.Transaction, error) {
	return _Channel.contract.Transact(opts, "disputeChallenge", oldState, newState, sig, id)
}

// DisputeChallenge is a paid mutator transaction binding the contract method 0xb03a28a8.
//
// Solidity: function disputeChallenge((address,address,uint256,uint256,uint8,uint128) oldState, (address,address,uint256,uint256,uint8,uint128) newState, bytes sig, bytes32 id) returns()
func (_Channel *ChannelSession) DisputeChallenge(oldState ChannelChannelState, newState ChannelChannelState, sig []byte, id [32]byte) (*types.Transaction, error) {
	return _Channel.Contract.DisputeChallenge(&_Channel.TransactOpts, oldState, newState, sig, id)
}

// DisputeChallenge is a paid mutator transaction binding the contract method 0xb03a28a8.
//
// Solidity: function disputeChallenge((address,address,uint256,uint256,uint8,uint128) oldState, (address,address,uint256,uint256,uint8,uint128) newState, bytes sig, bytes32 id) returns()
func (_Channel *ChannelTransactorSession) DisputeChallenge(oldState ChannelChannelState, newState ChannelChannelState, sig []byte, id [32]byte) (*types.Transaction, error) {
	return _Channel.Contract.DisputeChallenge(&_Channel.TransactOpts, oldState, newState, sig, id)
}

// Open is a paid mutator transaction binding the contract method 0xf513def1.
//
// Solidity: function open((address,address,uint256,uint256,uint8,uint128) state, bytes32 id) payable returns()
func (_Channel *ChannelTransactor) Open(opts *bind.TransactOpts, state ChannelChannelState, id [32]byte) (*types.Transaction, error) {
	return _Channel.contract.Transact(opts, "open", state, id)
}

// Open is a paid mutator transaction binding the contract method 0xf513def1.
//
// Solidity: function open((address,address,uint256,uint256,uint8,uint128) state, bytes32 id) payable returns()
func (_Channel *ChannelSession) Open(state ChannelChannelState, id [32]byte) (*types.Transaction, error) {
	return _Channel.Contract.Open(&_Channel.TransactOpts, state, id)
}

// Open is a paid mutator transaction binding the contract method 0xf513def1.
//
// Solidity: function open((address,address,uint256,uint256,uint8,uint128) state, bytes32 id) payable returns()
func (_Channel *ChannelTransactorSession) Open(state ChannelChannelState, id [32]byte) (*types.Transaction, error) {
	return _Channel.Contract.Open(&_Channel.TransactOpts, state, id)
}

// ChannelAcceptedIterator is returned from FilterAccepted and is used to iterate over the raw logs and unpacked data for Accepted events raised by the Channel contract.
type ChannelAcceptedIterator struct {
	Event *ChannelAccepted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChannelAcceptedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChannelAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChannelAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChannelAcceptedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChannelAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChannelAccepted represents a Accepted event raised by the Channel contract.
type ChannelAccepted struct {
	ID  [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAccepted is a free log retrieval operation binding the contract event 0x1f3c0697c3ada95f9e84a917995664b76cd8b4ae5de25e77ee111122ae3a00d0.
//
// Solidity: event Accepted(bytes32 indexed ID)
func (_Channel *ChannelFilterer) FilterAccepted(opts *bind.FilterOpts, ID [][32]byte) (*ChannelAcceptedIterator, error) {

	var IDRule []interface{}
	for _, IDItem := range ID {
		IDRule = append(IDRule, IDItem)
	}

	logs, sub, err := _Channel.contract.FilterLogs(opts, "Accepted", IDRule)
	if err != nil {
		return nil, err
	}
	return &ChannelAcceptedIterator{contract: _Channel.contract, event: "Accepted", logs: logs, sub: sub}, nil
}

// WatchAccepted is a free log subscription operation binding the contract event 0x1f3c0697c3ada95f9e84a917995664b76cd8b4ae5de25e77ee111122ae3a00d0.
//
// Solidity: event Accepted(bytes32 indexed ID)
func (_Channel *ChannelFilterer) WatchAccepted(opts *bind.WatchOpts, sink chan<- *ChannelAccepted, ID [][32]byte) (event.Subscription, error) {

	var IDRule []interface{}
	for _, IDItem := range ID {
		IDRule = append(IDRule, IDItem)
	}

	logs, sub, err := _Channel.contract.WatchLogs(opts, "Accepted", IDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChannelAccepted)
				if err := _Channel.contract.UnpackLog(event, "Accepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccepted is a log parse operation binding the contract event 0x1f3c0697c3ada95f9e84a917995664b76cd8b4ae5de25e77ee111122ae3a00d0.
//
// Solidity: event Accepted(bytes32 indexed ID)
func (_Channel *ChannelFilterer) ParseAccepted(log types.Log) (*ChannelAccepted, error) {
	event := new(ChannelAccepted)
	if err := _Channel.contract.UnpackLog(event, "Accepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChannelClosedIterator is returned from FilterClosed and is used to iterate over the raw logs and unpacked data for Closed events raised by the Channel contract.
type ChannelClosedIterator struct {
	Event *ChannelClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChannelClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChannelClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChannelClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChannelClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChannelClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChannelClosed represents a Closed event raised by the Channel contract.
type ChannelClosed struct {
	ID  [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterClosed is a free log retrieval operation binding the contract event 0x7b6ac8bce3193cb9464e9070476bf8926e449f5f743f8c7578eea15265467d79.
//
// Solidity: event Closed(bytes32 indexed ID)
func (_Channel *ChannelFilterer) FilterClosed(opts *bind.FilterOpts, ID [][32]byte) (*ChannelClosedIterator, error) {

	var IDRule []interface{}
	for _, IDItem := range ID {
		IDRule = append(IDRule, IDItem)
	}

	logs, sub, err := _Channel.contract.FilterLogs(opts, "Closed", IDRule)
	if err != nil {
		return nil, err
	}
	return &ChannelClosedIterator{contract: _Channel.contract, event: "Closed", logs: logs, sub: sub}, nil
}

// WatchClosed is a free log subscription operation binding the contract event 0x7b6ac8bce3193cb9464e9070476bf8926e449f5f743f8c7578eea15265467d79.
//
// Solidity: event Closed(bytes32 indexed ID)
func (_Channel *ChannelFilterer) WatchClosed(opts *bind.WatchOpts, sink chan<- *ChannelClosed, ID [][32]byte) (event.Subscription, error) {

	var IDRule []interface{}
	for _, IDItem := range ID {
		IDRule = append(IDRule, IDItem)
	}

	logs, sub, err := _Channel.contract.WatchLogs(opts, "Closed", IDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChannelClosed)
				if err := _Channel.contract.UnpackLog(event, "Closed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClosed is a log parse operation binding the contract event 0x7b6ac8bce3193cb9464e9070476bf8926e449f5f743f8c7578eea15265467d79.
//
// Solidity: event Closed(bytes32 indexed ID)
func (_Channel *ChannelFilterer) ParseClosed(log types.Log) (*ChannelClosed, error) {
	event := new(ChannelClosed)
	if err := _Channel.contract.UnpackLog(event, "Closed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChannelClosingIterator is returned from FilterClosing and is used to iterate over the raw logs and unpacked data for Closing events raised by the Channel contract.
type ChannelClosingIterator struct {
	Event *ChannelClosing // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChannelClosingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChannelClosing)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChannelClosing)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChannelClosingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChannelClosingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChannelClosing represents a Closing event raised by the Channel contract.
type ChannelClosing struct {
	ID    [32]byte
	Round *big.Int
	Time  uint64
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterClosing is a free log retrieval operation binding the contract event 0x6e129f552c838f9ab74444d21bd821c7694edfcbbd3c2294dbc7bc4829040180.
//
// Solidity: event Closing(bytes32 indexed ID, uint128 round, uint64 time)
func (_Channel *ChannelFilterer) FilterClosing(opts *bind.FilterOpts, ID [][32]byte) (*ChannelClosingIterator, error) {

	var IDRule []interface{}
	for _, IDItem := range ID {
		IDRule = append(IDRule, IDItem)
	}

	logs, sub, err := _Channel.contract.FilterLogs(opts, "Closing", IDRule)
	if err != nil {
		return nil, err
	}
	return &ChannelClosingIterator{contract: _Channel.contract, event: "Closing", logs: logs, sub: sub}, nil
}

// WatchClosing is a free log subscription operation binding the contract event 0x6e129f552c838f9ab74444d21bd821c7694edfcbbd3c2294dbc7bc4829040180.
//
// Solidity: event Closing(bytes32 indexed ID, uint128 round, uint64 time)
func (_Channel *ChannelFilterer) WatchClosing(opts *bind.WatchOpts, sink chan<- *ChannelClosing, ID [][32]byte) (event.Subscription, error) {

	var IDRule []interface{}
	for _, IDItem := range ID {
		IDRule = append(IDRule, IDItem)
	}

	logs, sub, err := _Channel.contract.WatchLogs(opts, "Closing", IDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChannelClosing)
				if err := _Channel.contract.UnpackLog(event, "Closing", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClosing is a log parse operation binding the contract event 0x6e129f552c838f9ab74444d21bd821c7694edfcbbd3c2294dbc7bc4829040180.
//
// Solidity: event Closing(bytes32 indexed ID, uint128 round, uint64 time)
func (_Channel *ChannelFilterer) ParseClosing(log types.Log) (*ChannelClosing, error) {
	event := new(ChannelClosing)
	if err := _Channel.contract.UnpackLog(event, "Closing", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChannelOpenIterator is returned from FilterOpen and is used to iterate over the raw logs and unpacked data for Open events raised by the Channel contract.
type ChannelOpenIterator struct {
	Event *ChannelOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChannelOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChannelOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChannelOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChannelOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChannelOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChannelOpen represents a Open event raised by the Channel contract.
type ChannelOpen struct {
	ID  [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOpen is a free log retrieval operation binding the contract event 0xddffb592d6434d02d388cf2eb4fbfa796fbfcd09e278d3466e7194dfd3c23a04.
//
// Solidity: event Open(bytes32 indexed ID)
func (_Channel *ChannelFilterer) FilterOpen(opts *bind.FilterOpts, ID [][32]byte) (*ChannelOpenIterator, error) {

	var IDRule []interface{}
	for _, IDItem := range ID {
		IDRule = append(IDRule, IDItem)
	}

	logs, sub, err := _Channel.contract.FilterLogs(opts, "Open", IDRule)
	if err != nil {
		return nil, err
	}
	return &ChannelOpenIterator{contract: _Channel.contract, event: "Open", logs: logs, sub: sub}, nil
}

// WatchOpen is a free log subscription operation binding the contract event 0xddffb592d6434d02d388cf2eb4fbfa796fbfcd09e278d3466e7194dfd3c23a04.
//
// Solidity: event Open(bytes32 indexed ID)
func (_Channel *ChannelFilterer) WatchOpen(opts *bind.WatchOpts, sink chan<- *ChannelOpen, ID [][32]byte) (event.Subscription, error) {

	var IDRule []interface{}
	for _, IDItem := range ID {
		IDRule = append(IDRule, IDItem)
	}

	logs, sub, err := _Channel.contract.WatchLogs(opts, "Open", IDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChannelOpen)
				if err := _Channel.contract.UnpackLog(event, "Open", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOpen is a log parse operation binding the contract event 0xddffb592d6434d02d388cf2eb4fbfa796fbfcd09e278d3466e7194dfd3c23a04.
//
// Solidity: event Open(bytes32 indexed ID)
func (_Channel *ChannelFilterer) ParseOpen(log types.Log) (*ChannelOpen, error) {
	event := new(ChannelOpen)
	if err := _Channel.contract.UnpackLog(event, "Open", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
